import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'
import { Dispatch } from 'redux'
import { createSelector } from 'reselect'
import { RootState } from './index'

interface LiquidityState {
  value: number
  status: string
}

const initialState: LiquidityState = {
  value: 0,
  status: 'idle'
}

export async function fetchCount (amount: number = 1): Promise<{ data: number }> {
  return await new Promise((resolve) =>
    setTimeout(() => resolve({ data: amount }), 500)
  )
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
  'counter/fetchCount',
  async (amount: number) => {
    const response = await fetchCount(amount)
    // The value we return becomes the `fulfilled` action payload
    return response.data
  }
)

export const counterSlice = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1
    },
    decrement: (state) => {
      state.value -= 1
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: PayloadAction<number>) => {
      state.value += action.payload
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = 'loading'
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = 'idle'
        state.value += action.payload
      })
  }
})

export const { increment, decrement, incrementByAmount } = counterSlice.actions

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd = (amount: number) => (dispatch: Dispatch, getState: () => RootState) => {
  const currentValue = getState().counter.value
  if (currentValue % 2 === 1) {
    dispatch(incrementByAmount(amount))
  }
}

// Create composable selectors
export const liquidityAmountSelector = createSelector((state: LiquidityState) => state.value, (value) => value)
// Example of composable selectors. Return value if status is 'loading'
export const loadingAmountSelector = createSelector(liquidityAmountSelector,
  (state: LiquidityState) => state.status, (value, status) => status === 'loading' ? value : 0)
